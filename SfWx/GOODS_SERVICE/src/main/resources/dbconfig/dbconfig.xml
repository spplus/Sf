<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:jaxws="http://cxf.apache.org/jaxws" 
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
        http://cxf.apache.org/core http://cxf.apache.org/schemas/core.xsd
        http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd">
	
	<import resource="db-beans.xml"/>
	
	 <bean id="sqlSessionFactoryDb1" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSourceDb1"/>
        <property value="classpath*:mybatis/**/*.xml" name="mapperLocations"></property>
        <property name="configLocation" value="classpath:dbconfig/mybatis-mysql-config.xml"/>
    </bean>
    
<!--     <bean id="sqlSessionFactoryDb2" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSourceDb2"/>
        <property value="classpath*:mybatis/**/*.xml" name="mapperLocations"></property>
        <property name="configLocation" value="classpath:dbconfig/mybatis-mysql-config.xml"/>
    </bean> -->
     
    
    <bean id="dynamicSqlSessionDaoSupport" class="com.sf.db.DynamicSqlSessionDaoSupport">
        <property name="targetSqlSessionFactorys">
            <map key-type="java.lang.String">            
                <entry value-ref="sqlSessionFactoryDb1" key="db1"></entry>
               <!--  <entry value-ref="sqlSessionFactoryDb2" key="db2"></entry>  -->               
            </map>   
        </property>  
        <property name="defaultTargetSqlSessionFactory" ref="sqlSessionFactoryDb1"></property>
    </bean>
	
	<!-- Dao -->
    <bean id="mybatis" class="com.sf.db.MybatisDao" parent="dynamicSqlSessionDaoSupport"></bean>
    
    <!-- JTA Transaction start -->
    <!-- user transaction -->
    <bean id="atomikosUserTransaction" class="com.atomikos.icatch.jta.UserTransactionImp">
        <description>user transaction</description>
        <property name="transactionTimeout"><value>300</value></property>
    </bean>
    <!-- user transaction manager -->
    <bean id="atomikosUserTransactionManager"
        class="com.atomikos.icatch.jta.UserTransactionManager" init-method="init" destroy-method="close">
        <description>user transaction manager</description>
        <property name="forceShutdown">
            <value>true</value>
        </property>
    </bean>
	<!-- jta transaction manager -->
	<bean name="transactionManager" class="org.springframework.transaction.jta.JtaTransactionManager">
		<description>jta transaction manager</description>
		<property name="transactionManager">
			<ref bean="atomikosUserTransactionManager" />
		</property>
		<property name="userTransaction">
			<ref bean="atomikosUserTransaction" />
		</property>
		<property name="allowCustomIsolationLevels">
			<value>true</value>
		</property>
	</bean> 
	<!-- Spring的声明式事务管理 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- 配置方法名，比如已delete开头的 -->
			<tx:method name="delete*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception"/>
			<tx:method name="insert*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception" />
			<tx:method name="update*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception" />
			<tx:method name="save*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception" />
			<tx:method name="create*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception" />
			<tx:method name="get*" propagation="NEVER" read-only="true" />
			<tx:method name="*" propagation="NEVER" read-only="true"/>
		</tx:attributes>
	</tx:advice>
	 <!-- 定义切面 -->
	<aop:config>
		<aop:pointcut id="pc" expression="execution(* com.sf.wx.service..*(..))" />
		<aop:advisor pointcut-ref="pc" advice-ref="txAdvice" order="2"/>
	</aop:config>
</beans>